{# ========================== DASHBOARD.TWIG ========================== #}
{% extends "base.twig" %}

{% set requiresAuth = true %}

{% block title %}Dashboard - Fix & Fast{% endblock %}

{% block styles %}
  {{ parent() }}
{% endblock %}

{% block content %}
  <div class="space-y-8 p-6">
    <div class="flex flex-col md:flex-row gap-4 justify-between items-center">
      <h1 class="text-5xl font-bold text-color-text">Dashboard</h1>
      <button
        id="createTicketBtn"
        class="px-6 py-3 bg-[#e498d1ff] text-white rounded-lg font-semibold hover:opacity-80 w-full md:w-auto"
      >
        Create New Ticket
      </button>
    </div>

    {# ---- Stats Overview ---- #}
    <div class="bg-white p-6 rounded-3xl shadow-lg">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="text-center md:text-left mb-6 md:mb-0">
          <h2 class="text-2xl font-semibold text-color-text">Ticket Status</h2>
          <p id="totalTickets" class="text-6xl font-bold text-color-text mt-4">0</p>
          <p class="text-xl text-color-text">Total Tickets</p>
        </div>

        <div style="width: 200px; height: 150px;">
          <canvas id="ticketsPieChart"></canvas>
        </div>
      </div>
    </div>

    {# ---- Individual Status Cards ---- #}
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="bg-white p-6 rounded-2xl shadow-lg text-center">
        <h3 id="openTickets" class="text-5xl font-bold text-color-open">0</h3>
        <p class="text-xl text-color-text mt-2">Open</p>
      </div>
      <div class="bg-white p-6 rounded-2xl shadow-lg text-center">
        <h3 id="inProgressTickets" class="text-5xl font-bold text-color-progress">0</h3>
        <p class="text-xl text-color-text mt-2">In Progress</p>
      </div>
      <div class="bg-white p-6 rounded-2xl shadow-lg text-center">
        <h3 id="closedTickets" class="text-5xl font-bold text-color-closed">0</h3>
        <p class="text-xl text-color-text mt-2">Closed</p>
      </div>
    </div>

    {# ---- Recent Tickets ---- #}
    <div class="bg-white p-6 rounded-2xl shadow-lg">
      <h2 class="text-2xl font-semibold mb-4 text-color-text">Recent Tickets</h2>
      <div id="recentTickets" class="space-y-4">
        <p class="text-color-text">Loading tickets...</p>
      </div>
    </div>
  </div>
  {% include 'components/createticket.twig' %}

{% endblock %}

{% block scripts %}
  {{ parent() }}
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/date-fns/2.30.0/date-fns.min.js"></script>

  <script>
    const STORAGE_KEY = 'ticketapp_tickets';

    // ===================== Ticket Logic ===================== //
    function getTickets() {
      const currentUser = auth.getCurrentUser() || {};
      const allTickets = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
      return allTickets.filter(ticket => ticket.userId === currentUser.id);
    }

    function saveTickets(tickets) {
      const allTickets = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
      const currentUser = auth.getCurrentUser() || {};

      const otherUsersTickets = allTickets.filter(ticket => ticket.userId !== currentUser.id);
      const updatedTickets = [...otherUsersTickets, ...tickets];
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedTickets));
    }

    function updateDashboard() {
      const currentUser = auth.getCurrentUser() || {};
      let tickets = getTickets().filter(t => t.userId === currentUser.id);

      const stats = {
        total: tickets.length,
        open: tickets.filter(t => t.status === 'open').length,
        in_progress: tickets.filter(t => t.status === 'in_progress').length,
        closed: tickets.filter(t => t.status === 'closed').length,
      };

      // --- Update Numbers --- //
      document.getElementById('totalTickets').textContent = stats.total;
      document.getElementById('openTickets').textContent = stats.open;
      document.getElementById('inProgressTickets').textContent = stats.in_progress;
      document.getElementById('closedTickets').textContent = stats.closed;

      // --- Update Chart --- //
      if (window.ticketsChart) {
        window.ticketsChart.data.datasets[0].data = [stats.open, stats.in_progress, stats.closed];
        window.ticketsChart.update();
      } else {
        const ctx = document.getElementById('ticketsPieChart').getContext('2d');
        window.ticketsChart = new Chart(ctx, {
          type: 'pie',
          data: {
            labels: ['Open', 'In Progress', 'Closed'],
            datasets: [{
              data: [stats.open, stats.in_progress, stats.closed],
              backgroundColor: ['#34d399', '#f59e0b', '#6b7280'],
            }],
          },
          options: { responsive: true, maintainAspectRatio: false },
        });
      }

    // --- Update Recent Tickets --- //
// --- Update Recent Tickets --- //
      const recentTicketsContainer = document.getElementById('recentTickets');
      const sortedTickets = [...tickets].sort(
        (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
      ).slice(0, 5);

      if (sortedTickets.length === 0) {
        recentTicketsContainer.innerHTML = '<p class="text-color-text">No recent tickets.</p>';
      } else {
        recentTicketsContainer.innerHTML = sortedTickets.map(ticket => {
          // --- SAFER DATE HANDLING ---
          let timeAgo = 'just now';
          if (typeof dateFns !== 'undefined' && dateFns.formatDistanceToNow) {
            try {
              timeAgo = dateFns.formatDistanceToNow(new Date(ticket.createdAt), { addSuffix: true });
            } catch (e) {
              timeAgo = new Date(ticket.createdAt).toLocaleDateString(); // Fallback
            }
          } else {
              timeAgo = new Date(ticket.createdAt).toLocaleDateString(); // Fallback
          }
          // --- END SAFER DATE HANDLING ---

          return `
          <div class="border-b border-gray-200 pb-3 last:border-b-0">
            <a href="/tickets" class="font-semibold text-[#e498d1ff] hover:underline">${ticket.title}</a>
            <p class="text-sm text-gray-500">
              Created ${timeAgo}
            </p>
          </div>
        `;
        }).join('');
      }

    // ===================== Event Bindings ===================== //
    document.addEventListener('DOMContentLoaded', () => {
      const createButton = document.getElementById('createTicketBtn');
      if (createButton) {
        createButton.addEventListener('click', () => {
          if (typeof window.showCreateTicketModalComponent === 'function') {
            window.showCreateTicketModalComponent();
          }
        });
      }

      // Expose globally for modal component access
      window.updateDashboard = updateDashboard;

      // Initialize dashboard
      updateDashboard();
    });
  </script>
{% endblock %}

{# --- Include Modal AFTER scripts so it sees updateDashboard --- #}
