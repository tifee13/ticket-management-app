{% extends "base.twig" %}
{% set requiresAuth = true %}

{% block title %}Manage Tickets - Fix & Fast{% endblock %}

{% block content %}
<div class="space-y-8">
  <div class="flex flex-col md:flex-row gap-4 justify-between items-center">
    <h1 class="text-5xl font-bold text-[#4B0082]">Manage Tickets</h1>
    <button
      id="createTicketBtn"
      class="px-6 py-3 bg-[#e498d1ff] text-white rounded-lg font-semibold hover:opacity-80 w-full md:w-auto"
    >
      Create New Ticket
    </button>
  </div>

  <div class="flex flex-col md:flex-row gap-4 p-4 bg-white rounded-lg shadow">
    <div class="flex-1">
      <input
        type="text"
        id="search"
        placeholder="Search by title or description..."
        class="w-full px-4 py-3 border border-[#b64fcfff] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#e498d1ff]"
      />
    </div>
    <div class="w-full md:w-1/4">
      <select
        id="statusFilter"
        class="w-full px-4 py-3 border border-[#b64fcfff] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#e498d1ff]"
      >
        <option value="all">All Statuses</option>
        <option value="open">Open</option>
        <option value="in_progress">In Progress</option>
        <option value="closed">Closed</option>
      </select>
    </div>
  </div>

  <div id="ticketsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <p class="text-gray-500">Loading tickets...</p>
  </div>

  <div id="noTicketsMessage" class="hidden text-center py-10">
    <p class="text-lg text-gray-500">No tickets found.</p>
    <button
      onclick="window.showCreateTicketModalComponent()"
      class="mt-4 px-6 py-2 bg-[#e498d1ff] text-white rounded-lg font-semibold hover:opacity-80"
    >
      Create Your First Ticket
    </button>
  </div>
</div>

{% include 'components/createticket.twig' %}
{% include 'components/editticket.twig' %}
{% endblock %}

{% block scripts %}
{{ parent() }}
<script src="https://cdnjs.cloudflare.com/ajax/libs/date-fns/2.30.0/date-fns.min.js"></script>

<script>
  const STORAGE_KEY = 'ticketapp_tickets';

  // ============ Storage Helpers ============ //
  function getTickets() {
    const user = auth.getCurrentUser() || {};
    const allTickets = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
    return allTickets.filter(t => t.userId === user.id);
  }

  function saveTickets(tickets) {
    const user = auth.getCurrentUser() || {};
    const allTickets = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
    const others = allTickets.filter(t => t.userId !== user.id);
    localStorage.setItem(STORAGE_KEY, JSON.stringify([...others, ...tickets]));
  }

  // ============ Rendering ============ //
  const statusStyles = {
    open: 'bg-green-100 text-green-800 border-green-200',
    in_progress: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    closed: 'bg-gray-200 text-gray-800 border-gray-300',
  };
  const priorityStyles = {
    low: 'bg-green-100 text-green-800 border-green-200',
    medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    high: 'bg-red-100 text-red-800 border-red-200',
  };

function renderTicketCard(ticket) {
    // --- SAFER DATE HANDLING ---
    let timeAgo = 'just now';
    if (typeof dateFns !== 'undefined' && dateFns.formatDistanceToNow) {
      try {
        timeAgo = dateFns.formatDistanceToNow(new Date(ticket.createdAt), { addSuffix: true });
      } catch (e) {
        timeAgo = new Date(ticket.createdAt).toLocaleDateString(); // Fallback
      }
    } else {
        timeAgo = new Date(ticket.createdAt).toLocaleDateString(); // Fallback
    }
    // --- END SAFER DATE HANDLING ---

    // Basic sanitization
    const title = (ticket.title || 'Untitled').replace(/</g, "&lt;").replace(/>/g, "&gt;");
    const description = (ticket.description || 'No description provided.').replace(/</g, "&lt;").replace(/>/g, "&gt;");

    return `
      <div class="bg-white p-6 rounded-2xl shadow-lg flex flex-col justify-between h-full">
        <div>
          <h3 class="text-2xl font-semibold text-[#4B0082] mb-3">${title}</h3>
          
                    <div class="flex flex-wrap items-center gap-x-4 gap-y-2 mb-4">
            <span class="px-3 py-1 text-xs font-bold rounded-full capitalize border ${statusStyles[ticket.status] || ''}">${ticket.status.replace('_', ' ')}</span>
            <span class="px-3 py-1 text-xs font-bold rounded-full capitalize border ${priorityStyles[ticket.priority] || ''}">${ticket.priority}</span>
            <span class="text-sm text-gray-500">${timeAgo}</span>
          </div>

          <p class="text-[#4B0082] mb-6 break-words">${description}</p>
        </div>
        
                <div class="flex justify-end gap-4 border-t border-gray-200 pt-4">
          <button onclick="editTicket('${ticket.id}')" class="font-medium text-[#e498d1ff] hover:text-[#b64fcfff] focus:outline-none focus:ring-2 focus:ring-[#e498d1ff] rounded px-2">Edit</button>
          <button onclick="deleteTicket('${ticket.id}')" class="font-medium text-gray-600 hover:text-red-500 focus:outline-none focus:ring-2 focus:ring-red-500 rounded px-2">Delete</button>
        </div>
      </div>
    `;
  }

  // ============ CRUD Operations ============ //
  function deleteTicket(id) {
    let tickets = getTickets();
    tickets = tickets.filter(t => t.id !== id);
    saveTickets(tickets);
    showToast('Ticket deleted', 'success');
    updateTicketsDisplay();
    if (typeof window.updateDashboard === 'function') window.updateDashboard();
  }

  function editTicket(id) {
    const ticket = getTickets().find(t => t.id === id);
    if (!ticket) return;

    if (typeof window.showEditTicketModal === 'function') {
        window.showEditTicketModal(ticket);
    } else {
        console.error('Edit ticket modal function not found.');
    }

    // const modal = document.getElementById('editTicketModal');
    // modal.classList.remove('hidden');
    // modal.classList.add('flex');

    // document.getElementById('editTicketId').value = ticket.id;
    // document.getElementById('editTitle').value = ticket.title;
    // document.getElementById('editDescription').value = ticket.description;
    // document.getElementById('editPriority').value = ticket.priority;
    // document.getElementById('editStatus').value = ticket.status;
  }

  function updateTicketsDisplay() {
    const container = document.getElementById('ticketsContainer');
    const noTicketsMessage = document.getElementById('noTicketsMessage');
    const search = document.getElementById('search').value.toLowerCase();
    const filter = document.getElementById('statusFilter').value;

    let tickets = getTickets()
      .filter(t => 
        (t.title.toLowerCase().includes(search) || (t.description || '').toLowerCase().includes(search)) &&
        (filter === 'all' || t.status === filter)
      )
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    if (tickets.length === 0) {
      container.innerHTML = '';
      noTicketsMessage.classList.remove('hidden');
    } else {
      noTicketsMessage.classList.add('hidden');
      container.innerHTML = tickets.map(renderTicketCard).join('');
    }
  }

  // ============ Listeners ============ //
  document.addEventListener('DOMContentLoaded', () => {
    if (!auth.isAuthenticated()) {
      window.location.href = '/auth/login?redirect=/tickets';
      return;
    }

    document.getElementById('createTicketBtn').addEventListener('click', () => {
      if (typeof window.showCreateTicketModalComponent === 'function') {
        window.showCreateTicketModalComponent();
      }
    });

    document.getElementById('search').addEventListener('input', updateTicketsDisplay);
    document.getElementById('statusFilter').addEventListener('change', updateTicketsDisplay);

    // Expose for modal refresh
    window.updateTicketsDisplay = updateTicketsDisplay;

    updateTicketsDisplay();
  });
</script>
{% endblock %}
